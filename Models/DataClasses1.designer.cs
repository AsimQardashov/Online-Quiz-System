#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExamingSystem.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Examing")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertExamQuestion(ExamQuestion instance);
    partial void UpdateExamQuestion(ExamQuestion instance);
    partial void DeleteExamQuestion(ExamQuestion instance);
    partial void InsertOption(Option instance);
    partial void UpdateOption(Option instance);
    partial void DeleteOption(Option instance);
    partial void InsertVariant(Variant instance);
    partial void UpdateVariant(Variant instance);
    partial void DeleteVariant(Variant instance);
    partial void InsertCategoryQuestion(CategoryQuestion instance);
    partial void UpdateCategoryQuestion(CategoryQuestion instance);
    partial void DeleteCategoryQuestion(CategoryQuestion instance);
    partial void InsertQuestionsOpen(QuestionsOpen instance);
    partial void UpdateQuestionsOpen(QuestionsOpen instance);
    partial void DeleteQuestionsOpen(QuestionsOpen instance);
    partial void InsertQuestionsTest(QuestionsTest instance);
    partial void UpdateQuestionsTest(QuestionsTest instance);
    partial void DeleteQuestionsTest(QuestionsTest instance);
    partial void InsertLoglar(Loglar instance);
    partial void UpdateLoglar(Loglar instance);
    partial void DeleteLoglar(Loglar instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertGender(Gender instance);
    partial void UpdateGender(Gender instance);
    partial void DeleteGender(Gender instance);
    partial void InsertTotalScore(TotalScore instance);
    partial void UpdateTotalScore(TotalScore instance);
    partial void DeleteTotalScore(TotalScore instance);
    partial void InsertExam(Exam instance);
    partial void UpdateExam(Exam instance);
    partial void DeleteExam(Exam instance);
    partial void InsertOpenQuestionsAnswer(OpenQuestionsAnswer instance);
    partial void UpdateOpenQuestionsAnswer(OpenQuestionsAnswer instance);
    partial void DeleteOpenQuestionsAnswer(OpenQuestionsAnswer instance);
    partial void InsertNew(New instance);
    partial void UpdateNew(New instance);
    partial void DeleteNew(New instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ExamingConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ExamQuestion> ExamQuestions
		{
			get
			{
				return this.GetTable<ExamQuestion>();
			}
		}
		
		public System.Data.Linq.Table<Option> Options
		{
			get
			{
				return this.GetTable<Option>();
			}
		}
		
		public System.Data.Linq.Table<Variant> Variants
		{
			get
			{
				return this.GetTable<Variant>();
			}
		}
		
		public System.Data.Linq.Table<CategoryQuestion> CategoryQuestions
		{
			get
			{
				return this.GetTable<CategoryQuestion>();
			}
		}
		
		public System.Data.Linq.Table<QuestionsOpen> QuestionsOpens
		{
			get
			{
				return this.GetTable<QuestionsOpen>();
			}
		}
		
		public System.Data.Linq.Table<QuestionsTest> QuestionsTests
		{
			get
			{
				return this.GetTable<QuestionsTest>();
			}
		}
		
		public System.Data.Linq.Table<Loglar> Loglars
		{
			get
			{
				return this.GetTable<Loglar>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Gender> Genders
		{
			get
			{
				return this.GetTable<Gender>();
			}
		}
		
		public System.Data.Linq.Table<TotalScore> TotalScores
		{
			get
			{
				return this.GetTable<TotalScore>();
			}
		}
		
		public System.Data.Linq.Table<Exam> Exams
		{
			get
			{
				return this.GetTable<Exam>();
			}
		}
		
		public System.Data.Linq.Table<student_answer> student_answers
		{
			get
			{
				return this.GetTable<student_answer>();
			}
		}
		
		public System.Data.Linq.Table<OpenQuestionsAnswer> OpenQuestionsAnswers
		{
			get
			{
				return this.GetTable<OpenQuestionsAnswer>();
			}
		}
		
		public System.Data.Linq.Table<New> News
		{
			get
			{
				return this.GetTable<New>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamQuestions")]
	public partial class ExamQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExamQuestionsId;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _ExamId;
		
		private System.Nullable<int> _QId;
		
		private System.Nullable<int> _QOId;
		
		private System.Nullable<int> _CQId;
		
		private string _SelectedAnswer;
		
		private string _TrueOrFalse;
		
		private EntityRef<CategoryQuestion> _CategoryQuestion;
		
		private EntityRef<QuestionsOpen> _QuestionsOpen;
		
		private EntityRef<QuestionsTest> _QuestionsTest;
		
		private EntityRef<User> _User;
		
		private EntityRef<Exam> _Exam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamQuestionsIdChanging(int value);
    partial void OnExamQuestionsIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnExamIdChanging(System.Nullable<int> value);
    partial void OnExamIdChanged();
    partial void OnQIdChanging(System.Nullable<int> value);
    partial void OnQIdChanged();
    partial void OnQOIdChanging(System.Nullable<int> value);
    partial void OnQOIdChanged();
    partial void OnCQIdChanging(System.Nullable<int> value);
    partial void OnCQIdChanged();
    partial void OnSelectedAnswerChanging(string value);
    partial void OnSelectedAnswerChanged();
    partial void OnTrueOrFalseChanging(string value);
    partial void OnTrueOrFalseChanged();
    #endregion
		
		public ExamQuestion()
		{
			this._CategoryQuestion = default(EntityRef<CategoryQuestion>);
			this._QuestionsOpen = default(EntityRef<QuestionsOpen>);
			this._QuestionsTest = default(EntityRef<QuestionsTest>);
			this._User = default(EntityRef<User>);
			this._Exam = default(EntityRef<Exam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamQuestionsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExamQuestionsId
		{
			get
			{
				return this._ExamQuestionsId;
			}
			set
			{
				if ((this._ExamQuestionsId != value))
				{
					this.OnExamQuestionsIdChanging(value);
					this.SendPropertyChanging();
					this._ExamQuestionsId = value;
					this.SendPropertyChanged("ExamQuestionsId");
					this.OnExamQuestionsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamId", DbType="Int")]
		public System.Nullable<int> ExamId
		{
			get
			{
				return this._ExamId;
			}
			set
			{
				if ((this._ExamId != value))
				{
					if (this._Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamIdChanging(value);
					this.SendPropertyChanging();
					this._ExamId = value;
					this.SendPropertyChanged("ExamId");
					this.OnExamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QId", DbType="Int")]
		public System.Nullable<int> QId
		{
			get
			{
				return this._QId;
			}
			set
			{
				if ((this._QId != value))
				{
					if (this._QuestionsTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQIdChanging(value);
					this.SendPropertyChanging();
					this._QId = value;
					this.SendPropertyChanged("QId");
					this.OnQIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QOId", DbType="Int")]
		public System.Nullable<int> QOId
		{
			get
			{
				return this._QOId;
			}
			set
			{
				if ((this._QOId != value))
				{
					if (this._QuestionsOpen.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQOIdChanging(value);
					this.SendPropertyChanging();
					this._QOId = value;
					this.SendPropertyChanged("QOId");
					this.OnQOIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CQId", DbType="Int")]
		public System.Nullable<int> CQId
		{
			get
			{
				return this._CQId;
			}
			set
			{
				if ((this._CQId != value))
				{
					if (this._CategoryQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCQIdChanging(value);
					this.SendPropertyChanging();
					this._CQId = value;
					this.SendPropertyChanged("CQId");
					this.OnCQIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelectedAnswer", DbType="NVarChar(MAX)")]
		public string SelectedAnswer
		{
			get
			{
				return this._SelectedAnswer;
			}
			set
			{
				if ((this._SelectedAnswer != value))
				{
					this.OnSelectedAnswerChanging(value);
					this.SendPropertyChanging();
					this._SelectedAnswer = value;
					this.SendPropertyChanged("SelectedAnswer");
					this.OnSelectedAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrueOrFalse", DbType="VarChar(20)")]
		public string TrueOrFalse
		{
			get
			{
				return this._TrueOrFalse;
			}
			set
			{
				if ((this._TrueOrFalse != value))
				{
					this.OnTrueOrFalseChanging(value);
					this.SendPropertyChanging();
					this._TrueOrFalse = value;
					this.SendPropertyChanged("TrueOrFalse");
					this.OnTrueOrFalseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryQuestion_ExamQuestion", Storage="_CategoryQuestion", ThisKey="CQId", OtherKey="CQId", IsForeignKey=true)]
		public CategoryQuestion CategoryQuestion
		{
			get
			{
				return this._CategoryQuestion.Entity;
			}
			set
			{
				CategoryQuestion previousValue = this._CategoryQuestion.Entity;
				if (((previousValue != value) 
							|| (this._CategoryQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryQuestion.Entity = null;
						previousValue.ExamQuestions.Remove(this);
					}
					this._CategoryQuestion.Entity = value;
					if ((value != null))
					{
						value.ExamQuestions.Add(this);
						this._CQId = value.CQId;
					}
					else
					{
						this._CQId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CategoryQuestion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionsOpen_ExamQuestion", Storage="_QuestionsOpen", ThisKey="QOId", OtherKey="QOId", IsForeignKey=true)]
		public QuestionsOpen QuestionsOpen
		{
			get
			{
				return this._QuestionsOpen.Entity;
			}
			set
			{
				QuestionsOpen previousValue = this._QuestionsOpen.Entity;
				if (((previousValue != value) 
							|| (this._QuestionsOpen.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionsOpen.Entity = null;
						previousValue.ExamQuestions.Remove(this);
					}
					this._QuestionsOpen.Entity = value;
					if ((value != null))
					{
						value.ExamQuestions.Add(this);
						this._QOId = value.QOId;
					}
					else
					{
						this._QOId = default(Nullable<int>);
					}
					this.SendPropertyChanged("QuestionsOpen");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionsTest_ExamQuestion", Storage="_QuestionsTest", ThisKey="QId", OtherKey="QId", IsForeignKey=true)]
		public QuestionsTest QuestionsTest
		{
			get
			{
				return this._QuestionsTest.Entity;
			}
			set
			{
				QuestionsTest previousValue = this._QuestionsTest.Entity;
				if (((previousValue != value) 
							|| (this._QuestionsTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionsTest.Entity = null;
						previousValue.ExamQuestions.Remove(this);
					}
					this._QuestionsTest.Entity = value;
					if ((value != null))
					{
						value.ExamQuestions.Add(this);
						this._QId = value.QId;
					}
					else
					{
						this._QId = default(Nullable<int>);
					}
					this.SendPropertyChanged("QuestionsTest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ExamQuestion", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ExamQuestions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ExamQuestions.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_ExamQuestion", Storage="_Exam", ThisKey="ExamId", OtherKey="ExamId", IsForeignKey=true)]
		public Exam Exam
		{
			get
			{
				return this._Exam.Entity;
			}
			set
			{
				Exam previousValue = this._Exam.Entity;
				if (((previousValue != value) 
							|| (this._Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam.Entity = null;
						previousValue.ExamQuestions.Remove(this);
					}
					this._Exam.Entity = value;
					if ((value != null))
					{
						value.ExamQuestions.Add(this);
						this._ExamId = value.ExamId;
					}
					else
					{
						this._ExamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Exam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Options")]
	public partial class Option : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OptId;
		
		private string _Options;
		
		private EntitySet<Variant> _Variants;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOptIdChanging(int value);
    partial void OnOptIdChanged();
    partial void OnOptionsChanging(string value);
    partial void OnOptionsChanged();
    #endregion
		
		public Option()
		{
			this._Variants = new EntitySet<Variant>(new Action<Variant>(this.attach_Variants), new Action<Variant>(this.detach_Variants));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OptId
		{
			get
			{
				return this._OptId;
			}
			set
			{
				if ((this._OptId != value))
				{
					this.OnOptIdChanging(value);
					this.SendPropertyChanging();
					this._OptId = value;
					this.SendPropertyChanged("OptId");
					this.OnOptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Options", DbType="VarChar(5)")]
		public string Options
		{
			get
			{
				return this._Options;
			}
			set
			{
				if ((this._Options != value))
				{
					this.OnOptionsChanging(value);
					this.SendPropertyChanging();
					this._Options = value;
					this.SendPropertyChanged("Options");
					this.OnOptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Option_Variant", Storage="_Variants", ThisKey="OptId", OtherKey="OptId")]
		public EntitySet<Variant> Variants
		{
			get
			{
				return this._Variants;
			}
			set
			{
				this._Variants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Variants(Variant entity)
		{
			this.SendPropertyChanging();
			entity.Option = this;
		}
		
		private void detach_Variants(Variant entity)
		{
			this.SendPropertyChanging();
			entity.Option = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Variants")]
	public partial class Variant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VariantId;
		
		private System.Nullable<int> _QId;
		
		private string _VariantText;
		
		private System.Nullable<int> _OptId;
		
		private string _Correct;
		
		private EntitySet<QuestionsTest> _QuestionsTests;
		
		private EntityRef<Option> _Option;
		
		private EntityRef<QuestionsTest> _QuestionsTest;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVariantIdChanging(int value);
    partial void OnVariantIdChanged();
    partial void OnQIdChanging(System.Nullable<int> value);
    partial void OnQIdChanged();
    partial void OnVariantTextChanging(string value);
    partial void OnVariantTextChanged();
    partial void OnOptIdChanging(System.Nullable<int> value);
    partial void OnOptIdChanged();
    partial void OnCorrectChanging(string value);
    partial void OnCorrectChanged();
    #endregion
		
		public Variant()
		{
			this._QuestionsTests = new EntitySet<QuestionsTest>(new Action<QuestionsTest>(this.attach_QuestionsTests), new Action<QuestionsTest>(this.detach_QuestionsTests));
			this._Option = default(EntityRef<Option>);
			this._QuestionsTest = default(EntityRef<QuestionsTest>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariantId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VariantId
		{
			get
			{
				return this._VariantId;
			}
			set
			{
				if ((this._VariantId != value))
				{
					this.OnVariantIdChanging(value);
					this.SendPropertyChanging();
					this._VariantId = value;
					this.SendPropertyChanged("VariantId");
					this.OnVariantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QId", DbType="Int")]
		public System.Nullable<int> QId
		{
			get
			{
				return this._QId;
			}
			set
			{
				if ((this._QId != value))
				{
					if (this._QuestionsTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQIdChanging(value);
					this.SendPropertyChanging();
					this._QId = value;
					this.SendPropertyChanged("QId");
					this.OnQIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariantText", DbType="NVarChar(MAX)")]
		public string VariantText
		{
			get
			{
				return this._VariantText;
			}
			set
			{
				if ((this._VariantText != value))
				{
					this.OnVariantTextChanging(value);
					this.SendPropertyChanging();
					this._VariantText = value;
					this.SendPropertyChanged("VariantText");
					this.OnVariantTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptId", DbType="Int")]
		public System.Nullable<int> OptId
		{
			get
			{
				return this._OptId;
			}
			set
			{
				if ((this._OptId != value))
				{
					if (this._Option.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOptIdChanging(value);
					this.SendPropertyChanging();
					this._OptId = value;
					this.SendPropertyChanged("OptId");
					this.OnOptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Correct", DbType="VarChar(5)")]
		public string Correct
		{
			get
			{
				return this._Correct;
			}
			set
			{
				if ((this._Correct != value))
				{
					this.OnCorrectChanging(value);
					this.SendPropertyChanging();
					this._Correct = value;
					this.SendPropertyChanged("Correct");
					this.OnCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variant_QuestionsTest", Storage="_QuestionsTests", ThisKey="VariantId", OtherKey="VariantId")]
		public EntitySet<QuestionsTest> QuestionsTests
		{
			get
			{
				return this._QuestionsTests;
			}
			set
			{
				this._QuestionsTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Option_Variant", Storage="_Option", ThisKey="OptId", OtherKey="OptId", IsForeignKey=true)]
		public Option Option
		{
			get
			{
				return this._Option.Entity;
			}
			set
			{
				Option previousValue = this._Option.Entity;
				if (((previousValue != value) 
							|| (this._Option.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Option.Entity = null;
						previousValue.Variants.Remove(this);
					}
					this._Option.Entity = value;
					if ((value != null))
					{
						value.Variants.Add(this);
						this._OptId = value.OptId;
					}
					else
					{
						this._OptId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Option");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionsTest_Variant", Storage="_QuestionsTest", ThisKey="QId", OtherKey="QId", IsForeignKey=true)]
		public QuestionsTest QuestionsTest
		{
			get
			{
				return this._QuestionsTest.Entity;
			}
			set
			{
				QuestionsTest previousValue = this._QuestionsTest.Entity;
				if (((previousValue != value) 
							|| (this._QuestionsTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionsTest.Entity = null;
						previousValue.Variants.Remove(this);
					}
					this._QuestionsTest.Entity = value;
					if ((value != null))
					{
						value.Variants.Add(this);
						this._QId = value.QId;
					}
					else
					{
						this._QId = default(Nullable<int>);
					}
					this.SendPropertyChanged("QuestionsTest");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuestionsTests(QuestionsTest entity)
		{
			this.SendPropertyChanging();
			entity.Variant = this;
		}
		
		private void detach_QuestionsTests(QuestionsTest entity)
		{
			this.SendPropertyChanging();
			entity.Variant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryQuestions")]
	public partial class CategoryQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CQId;
		
		private string _CQName;
		
		private string _CStatus;
		
		private System.Nullable<System.DateTime> _CategoryDate;
		
		private EntitySet<ExamQuestion> _ExamQuestions;
		
		private EntitySet<QuestionsOpen> _QuestionsOpens;
		
		private EntitySet<QuestionsTest> _QuestionsTests;
		
		private EntitySet<Exam> _Exams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCQIdChanging(int value);
    partial void OnCQIdChanged();
    partial void OnCQNameChanging(string value);
    partial void OnCQNameChanged();
    partial void OnCStatusChanging(string value);
    partial void OnCStatusChanged();
    partial void OnCategoryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCategoryDateChanged();
    #endregion
		
		public CategoryQuestion()
		{
			this._ExamQuestions = new EntitySet<ExamQuestion>(new Action<ExamQuestion>(this.attach_ExamQuestions), new Action<ExamQuestion>(this.detach_ExamQuestions));
			this._QuestionsOpens = new EntitySet<QuestionsOpen>(new Action<QuestionsOpen>(this.attach_QuestionsOpens), new Action<QuestionsOpen>(this.detach_QuestionsOpens));
			this._QuestionsTests = new EntitySet<QuestionsTest>(new Action<QuestionsTest>(this.attach_QuestionsTests), new Action<QuestionsTest>(this.detach_QuestionsTests));
			this._Exams = new EntitySet<Exam>(new Action<Exam>(this.attach_Exams), new Action<Exam>(this.detach_Exams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CQId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CQId
		{
			get
			{
				return this._CQId;
			}
			set
			{
				if ((this._CQId != value))
				{
					this.OnCQIdChanging(value);
					this.SendPropertyChanging();
					this._CQId = value;
					this.SendPropertyChanged("CQId");
					this.OnCQIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CQName", DbType="NVarChar(MAX)")]
		public string CQName
		{
			get
			{
				return this._CQName;
			}
			set
			{
				if ((this._CQName != value))
				{
					this.OnCQNameChanging(value);
					this.SendPropertyChanging();
					this._CQName = value;
					this.SendPropertyChanged("CQName");
					this.OnCQNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CStatus", DbType="VarChar(7)")]
		public string CStatus
		{
			get
			{
				return this._CStatus;
			}
			set
			{
				if ((this._CStatus != value))
				{
					this.OnCStatusChanging(value);
					this.SendPropertyChanging();
					this._CStatus = value;
					this.SendPropertyChanged("CStatus");
					this.OnCStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CategoryDate
		{
			get
			{
				return this._CategoryDate;
			}
			set
			{
				if ((this._CategoryDate != value))
				{
					this.OnCategoryDateChanging(value);
					this.SendPropertyChanging();
					this._CategoryDate = value;
					this.SendPropertyChanged("CategoryDate");
					this.OnCategoryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryQuestion_ExamQuestion", Storage="_ExamQuestions", ThisKey="CQId", OtherKey="CQId")]
		public EntitySet<ExamQuestion> ExamQuestions
		{
			get
			{
				return this._ExamQuestions;
			}
			set
			{
				this._ExamQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryQuestion_QuestionsOpen", Storage="_QuestionsOpens", ThisKey="CQId", OtherKey="CQId")]
		public EntitySet<QuestionsOpen> QuestionsOpens
		{
			get
			{
				return this._QuestionsOpens;
			}
			set
			{
				this._QuestionsOpens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryQuestion_QuestionsTest", Storage="_QuestionsTests", ThisKey="CQId", OtherKey="CQId")]
		public EntitySet<QuestionsTest> QuestionsTests
		{
			get
			{
				return this._QuestionsTests;
			}
			set
			{
				this._QuestionsTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryQuestion_Exam", Storage="_Exams", ThisKey="CQId", OtherKey="CQId")]
		public EntitySet<Exam> Exams
		{
			get
			{
				return this._Exams;
			}
			set
			{
				this._Exams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamQuestions(ExamQuestion entity)
		{
			this.SendPropertyChanging();
			entity.CategoryQuestion = this;
		}
		
		private void detach_ExamQuestions(ExamQuestion entity)
		{
			this.SendPropertyChanging();
			entity.CategoryQuestion = null;
		}
		
		private void attach_QuestionsOpens(QuestionsOpen entity)
		{
			this.SendPropertyChanging();
			entity.CategoryQuestion = this;
		}
		
		private void detach_QuestionsOpens(QuestionsOpen entity)
		{
			this.SendPropertyChanging();
			entity.CategoryQuestion = null;
		}
		
		private void attach_QuestionsTests(QuestionsTest entity)
		{
			this.SendPropertyChanging();
			entity.CategoryQuestion = this;
		}
		
		private void detach_QuestionsTests(QuestionsTest entity)
		{
			this.SendPropertyChanging();
			entity.CategoryQuestion = null;
		}
		
		private void attach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.CategoryQuestion = this;
		}
		
		private void detach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.CategoryQuestion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionsOpen")]
	public partial class QuestionsOpen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QOId;
		
		private string _QOText;
		
		private string _QOStatus;
		
		private System.Nullable<int> _CQId;
		
		private System.Nullable<int> _AdminConturol;
		
		private EntitySet<ExamQuestion> _ExamQuestions;
		
		private EntityRef<CategoryQuestion> _CategoryQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQOIdChanging(int value);
    partial void OnQOIdChanged();
    partial void OnQOTextChanging(string value);
    partial void OnQOTextChanged();
    partial void OnQOStatusChanging(string value);
    partial void OnQOStatusChanged();
    partial void OnCQIdChanging(System.Nullable<int> value);
    partial void OnCQIdChanged();
    partial void OnAdminConturolChanging(System.Nullable<int> value);
    partial void OnAdminConturolChanged();
    #endregion
		
		public QuestionsOpen()
		{
			this._ExamQuestions = new EntitySet<ExamQuestion>(new Action<ExamQuestion>(this.attach_ExamQuestions), new Action<ExamQuestion>(this.detach_ExamQuestions));
			this._CategoryQuestion = default(EntityRef<CategoryQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QOId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QOId
		{
			get
			{
				return this._QOId;
			}
			set
			{
				if ((this._QOId != value))
				{
					this.OnQOIdChanging(value);
					this.SendPropertyChanging();
					this._QOId = value;
					this.SendPropertyChanged("QOId");
					this.OnQOIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QOText", DbType="NVarChar(MAX)")]
		public string QOText
		{
			get
			{
				return this._QOText;
			}
			set
			{
				if ((this._QOText != value))
				{
					this.OnQOTextChanging(value);
					this.SendPropertyChanging();
					this._QOText = value;
					this.SendPropertyChanged("QOText");
					this.OnQOTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QOStatus", DbType="VarChar(7)")]
		public string QOStatus
		{
			get
			{
				return this._QOStatus;
			}
			set
			{
				if ((this._QOStatus != value))
				{
					this.OnQOStatusChanging(value);
					this.SendPropertyChanging();
					this._QOStatus = value;
					this.SendPropertyChanged("QOStatus");
					this.OnQOStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CQId", DbType="Int")]
		public System.Nullable<int> CQId
		{
			get
			{
				return this._CQId;
			}
			set
			{
				if ((this._CQId != value))
				{
					if (this._CategoryQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCQIdChanging(value);
					this.SendPropertyChanging();
					this._CQId = value;
					this.SendPropertyChanged("CQId");
					this.OnCQIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminConturol", DbType="Int")]
		public System.Nullable<int> AdminConturol
		{
			get
			{
				return this._AdminConturol;
			}
			set
			{
				if ((this._AdminConturol != value))
				{
					this.OnAdminConturolChanging(value);
					this.SendPropertyChanging();
					this._AdminConturol = value;
					this.SendPropertyChanged("AdminConturol");
					this.OnAdminConturolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionsOpen_ExamQuestion", Storage="_ExamQuestions", ThisKey="QOId", OtherKey="QOId")]
		public EntitySet<ExamQuestion> ExamQuestions
		{
			get
			{
				return this._ExamQuestions;
			}
			set
			{
				this._ExamQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryQuestion_QuestionsOpen", Storage="_CategoryQuestion", ThisKey="CQId", OtherKey="CQId", IsForeignKey=true)]
		public CategoryQuestion CategoryQuestion
		{
			get
			{
				return this._CategoryQuestion.Entity;
			}
			set
			{
				CategoryQuestion previousValue = this._CategoryQuestion.Entity;
				if (((previousValue != value) 
							|| (this._CategoryQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryQuestion.Entity = null;
						previousValue.QuestionsOpens.Remove(this);
					}
					this._CategoryQuestion.Entity = value;
					if ((value != null))
					{
						value.QuestionsOpens.Add(this);
						this._CQId = value.CQId;
					}
					else
					{
						this._CQId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CategoryQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamQuestions(ExamQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionsOpen = this;
		}
		
		private void detach_ExamQuestions(ExamQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionsOpen = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionsTest")]
	public partial class QuestionsTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QId;
		
		private string _QText;
		
		private string _QStatus;
		
		private System.Nullable<int> _CQId;
		
		private System.Nullable<int> _VariantId;
		
		private System.Nullable<System.DateTime> _QuestionDate;
		
		private System.Nullable<int> _AdminConturol;
		
		private EntitySet<ExamQuestion> _ExamQuestions;
		
		private EntitySet<Variant> _Variants;
		
		private EntityRef<Variant> _Variant;
		
		private EntityRef<CategoryQuestion> _CategoryQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQIdChanging(int value);
    partial void OnQIdChanged();
    partial void OnQTextChanging(string value);
    partial void OnQTextChanged();
    partial void OnQStatusChanging(string value);
    partial void OnQStatusChanged();
    partial void OnCQIdChanging(System.Nullable<int> value);
    partial void OnCQIdChanged();
    partial void OnVariantIdChanging(System.Nullable<int> value);
    partial void OnVariantIdChanged();
    partial void OnQuestionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnQuestionDateChanged();
    partial void OnAdminConturolChanging(System.Nullable<int> value);
    partial void OnAdminConturolChanged();
    #endregion
		
		public QuestionsTest()
		{
			this._ExamQuestions = new EntitySet<ExamQuestion>(new Action<ExamQuestion>(this.attach_ExamQuestions), new Action<ExamQuestion>(this.detach_ExamQuestions));
			this._Variants = new EntitySet<Variant>(new Action<Variant>(this.attach_Variants), new Action<Variant>(this.detach_Variants));
			this._Variant = default(EntityRef<Variant>);
			this._CategoryQuestion = default(EntityRef<CategoryQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QId
		{
			get
			{
				return this._QId;
			}
			set
			{
				if ((this._QId != value))
				{
					this.OnQIdChanging(value);
					this.SendPropertyChanging();
					this._QId = value;
					this.SendPropertyChanged("QId");
					this.OnQIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QText", DbType="NVarChar(MAX)")]
		public string QText
		{
			get
			{
				return this._QText;
			}
			set
			{
				if ((this._QText != value))
				{
					this.OnQTextChanging(value);
					this.SendPropertyChanging();
					this._QText = value;
					this.SendPropertyChanged("QText");
					this.OnQTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QStatus", DbType="VarChar(7)")]
		public string QStatus
		{
			get
			{
				return this._QStatus;
			}
			set
			{
				if ((this._QStatus != value))
				{
					this.OnQStatusChanging(value);
					this.SendPropertyChanging();
					this._QStatus = value;
					this.SendPropertyChanged("QStatus");
					this.OnQStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CQId", DbType="Int")]
		public System.Nullable<int> CQId
		{
			get
			{
				return this._CQId;
			}
			set
			{
				if ((this._CQId != value))
				{
					if (this._CategoryQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCQIdChanging(value);
					this.SendPropertyChanging();
					this._CQId = value;
					this.SendPropertyChanged("CQId");
					this.OnCQIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VariantId", DbType="Int")]
		public System.Nullable<int> VariantId
		{
			get
			{
				return this._VariantId;
			}
			set
			{
				if ((this._VariantId != value))
				{
					if (this._Variant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVariantIdChanging(value);
					this.SendPropertyChanging();
					this._VariantId = value;
					this.SendPropertyChanged("VariantId");
					this.OnVariantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> QuestionDate
		{
			get
			{
				return this._QuestionDate;
			}
			set
			{
				if ((this._QuestionDate != value))
				{
					this.OnQuestionDateChanging(value);
					this.SendPropertyChanging();
					this._QuestionDate = value;
					this.SendPropertyChanged("QuestionDate");
					this.OnQuestionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminConturol", DbType="Int")]
		public System.Nullable<int> AdminConturol
		{
			get
			{
				return this._AdminConturol;
			}
			set
			{
				if ((this._AdminConturol != value))
				{
					this.OnAdminConturolChanging(value);
					this.SendPropertyChanging();
					this._AdminConturol = value;
					this.SendPropertyChanged("AdminConturol");
					this.OnAdminConturolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionsTest_ExamQuestion", Storage="_ExamQuestions", ThisKey="QId", OtherKey="QId")]
		public EntitySet<ExamQuestion> ExamQuestions
		{
			get
			{
				return this._ExamQuestions;
			}
			set
			{
				this._ExamQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionsTest_Variant", Storage="_Variants", ThisKey="QId", OtherKey="QId")]
		public EntitySet<Variant> Variants
		{
			get
			{
				return this._Variants;
			}
			set
			{
				this._Variants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Variant_QuestionsTest", Storage="_Variant", ThisKey="VariantId", OtherKey="VariantId", IsForeignKey=true)]
		public Variant Variant
		{
			get
			{
				return this._Variant.Entity;
			}
			set
			{
				Variant previousValue = this._Variant.Entity;
				if (((previousValue != value) 
							|| (this._Variant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Variant.Entity = null;
						previousValue.QuestionsTests.Remove(this);
					}
					this._Variant.Entity = value;
					if ((value != null))
					{
						value.QuestionsTests.Add(this);
						this._VariantId = value.VariantId;
					}
					else
					{
						this._VariantId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Variant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryQuestion_QuestionsTest", Storage="_CategoryQuestion", ThisKey="CQId", OtherKey="CQId", IsForeignKey=true)]
		public CategoryQuestion CategoryQuestion
		{
			get
			{
				return this._CategoryQuestion.Entity;
			}
			set
			{
				CategoryQuestion previousValue = this._CategoryQuestion.Entity;
				if (((previousValue != value) 
							|| (this._CategoryQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryQuestion.Entity = null;
						previousValue.QuestionsTests.Remove(this);
					}
					this._CategoryQuestion.Entity = value;
					if ((value != null))
					{
						value.QuestionsTests.Add(this);
						this._CQId = value.CQId;
					}
					else
					{
						this._CQId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CategoryQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamQuestions(ExamQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionsTest = this;
		}
		
		private void detach_ExamQuestions(ExamQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionsTest = null;
		}
		
		private void attach_Variants(Variant entity)
		{
			this.SendPropertyChanging();
			entity.QuestionsTest = this;
		}
		
		private void detach_Variants(Variant entity)
		{
			this.SendPropertyChanging();
			entity.QuestionsTest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Loglar")]
	public partial class Loglar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogId;
		
		private System.Nullable<int> _UserId;
		
		private string _LogName;
		
		private System.Nullable<System.DateTime> _LogDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIdChanging(int value);
    partial void OnLogIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnLogNameChanging(string value);
    partial void OnLogNameChanged();
    partial void OnLogDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLogDateChanged();
    #endregion
		
		public Loglar()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogId
		{
			get
			{
				return this._LogId;
			}
			set
			{
				if ((this._LogId != value))
				{
					this.OnLogIdChanging(value);
					this.SendPropertyChanging();
					this._LogId = value;
					this.SendPropertyChanged("LogId");
					this.OnLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogName", DbType="VarChar(20)")]
		public string LogName
		{
			get
			{
				return this._LogName;
			}
			set
			{
				if ((this._LogName != value))
				{
					this.OnLogNameChanging(value);
					this.SendPropertyChanging();
					this._LogName = value;
					this.SendPropertyChanged("LogName");
					this.OnLogNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _UserFullName;
		
		private string _UserEmail;
		
		private string _UserRole;
		
		private string _UserStatus;
		
		private string _UserPassword;
		
		private string _UserMFenn;
		
		private System.Nullable<System.DateTime> _UserDate;
		
		private string _UserPhoto;
		
		private System.Nullable<int> _GenderId;
		
		private EntitySet<ExamQuestion> _ExamQuestions;
		
		private EntitySet<TotalScore> _TotalScores;
		
		private EntitySet<Exam> _Exams;
		
		private EntityRef<Gender> _Gender;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserFullNameChanging(string value);
    partial void OnUserFullNameChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    partial void OnUserRoleChanging(string value);
    partial void OnUserRoleChanged();
    partial void OnUserStatusChanging(string value);
    partial void OnUserStatusChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnUserMFennChanging(string value);
    partial void OnUserMFennChanged();
    partial void OnUserDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUserDateChanged();
    partial void OnUserPhotoChanging(string value);
    partial void OnUserPhotoChanged();
    partial void OnGenderIdChanging(System.Nullable<int> value);
    partial void OnGenderIdChanged();
    #endregion
		
		public User()
		{
			this._ExamQuestions = new EntitySet<ExamQuestion>(new Action<ExamQuestion>(this.attach_ExamQuestions), new Action<ExamQuestion>(this.detach_ExamQuestions));
			this._TotalScores = new EntitySet<TotalScore>(new Action<TotalScore>(this.attach_TotalScores), new Action<TotalScore>(this.detach_TotalScores));
			this._Exams = new EntitySet<Exam>(new Action<Exam>(this.attach_Exams), new Action<Exam>(this.detach_Exams));
			this._Gender = default(EntityRef<Gender>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(20)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFullName", DbType="NVarChar(40)")]
		public string UserFullName
		{
			get
			{
				return this._UserFullName;
			}
			set
			{
				if ((this._UserFullName != value))
				{
					this.OnUserFullNameChanging(value);
					this.SendPropertyChanging();
					this._UserFullName = value;
					this.SendPropertyChanged("UserFullName");
					this.OnUserFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="VarChar(50)")]
		public string UserEmail
		{
			get
			{
				return this._UserEmail;
			}
			set
			{
				if ((this._UserEmail != value))
				{
					this.OnUserEmailChanging(value);
					this.SendPropertyChanging();
					this._UserEmail = value;
					this.SendPropertyChanged("UserEmail");
					this.OnUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRole", DbType="VarChar(5)")]
		public string UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				if ((this._UserRole != value))
				{
					this.OnUserRoleChanging(value);
					this.SendPropertyChanging();
					this._UserRole = value;
					this.SendPropertyChanged("UserRole");
					this.OnUserRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserStatus", DbType="VarChar(7)")]
		public string UserStatus
		{
			get
			{
				return this._UserStatus;
			}
			set
			{
				if ((this._UserStatus != value))
				{
					this.OnUserStatusChanging(value);
					this.SendPropertyChanging();
					this._UserStatus = value;
					this.SendPropertyChanged("UserStatus");
					this.OnUserStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="VarChar(50)")]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserMFenn", DbType="NVarChar(40)")]
		public string UserMFenn
		{
			get
			{
				return this._UserMFenn;
			}
			set
			{
				if ((this._UserMFenn != value))
				{
					this.OnUserMFennChanging(value);
					this.SendPropertyChanging();
					this._UserMFenn = value;
					this.SendPropertyChanged("UserMFenn");
					this.OnUserMFennChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UserDate
		{
			get
			{
				return this._UserDate;
			}
			set
			{
				if ((this._UserDate != value))
				{
					this.OnUserDateChanging(value);
					this.SendPropertyChanging();
					this._UserDate = value;
					this.SendPropertyChanged("UserDate");
					this.OnUserDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPhoto", DbType="VarChar(MAX)")]
		public string UserPhoto
		{
			get
			{
				return this._UserPhoto;
			}
			set
			{
				if ((this._UserPhoto != value))
				{
					this.OnUserPhotoChanging(value);
					this.SendPropertyChanging();
					this._UserPhoto = value;
					this.SendPropertyChanged("UserPhoto");
					this.OnUserPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderId", DbType="Int")]
		public System.Nullable<int> GenderId
		{
			get
			{
				return this._GenderId;
			}
			set
			{
				if ((this._GenderId != value))
				{
					if (this._Gender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderIdChanging(value);
					this.SendPropertyChanging();
					this._GenderId = value;
					this.SendPropertyChanged("GenderId");
					this.OnGenderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ExamQuestion", Storage="_ExamQuestions", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<ExamQuestion> ExamQuestions
		{
			get
			{
				return this._ExamQuestions;
			}
			set
			{
				this._ExamQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TotalScore", Storage="_TotalScores", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<TotalScore> TotalScores
		{
			get
			{
				return this._TotalScores;
			}
			set
			{
				this._TotalScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Exam", Storage="_Exams", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Exam> Exams
		{
			get
			{
				return this._Exams;
			}
			set
			{
				this._Exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_User", Storage="_Gender", ThisKey="GenderId", OtherKey="GenderId", IsForeignKey=true)]
		public Gender Gender
		{
			get
			{
				return this._Gender.Entity;
			}
			set
			{
				Gender previousValue = this._Gender.Entity;
				if (((previousValue != value) 
							|| (this._Gender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gender.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Gender.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._GenderId = value.GenderId;
					}
					else
					{
						this._GenderId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Gender");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamQuestions(ExamQuestion entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ExamQuestions(ExamQuestion entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TotalScores(TotalScore entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TotalScores(TotalScore entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gender")]
	public partial class Gender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenderId;
		
		private string _GenderName;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenderIdChanging(int value);
    partial void OnGenderIdChanged();
    partial void OnGenderNameChanging(string value);
    partial void OnGenderNameChanged();
    #endregion
		
		public Gender()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GenderId
		{
			get
			{
				return this._GenderId;
			}
			set
			{
				if ((this._GenderId != value))
				{
					this.OnGenderIdChanging(value);
					this.SendPropertyChanging();
					this._GenderId = value;
					this.SendPropertyChanged("GenderId");
					this.OnGenderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderName", DbType="NVarChar(10)")]
		public string GenderName
		{
			get
			{
				return this._GenderName;
			}
			set
			{
				if ((this._GenderName != value))
				{
					this.OnGenderNameChanging(value);
					this.SendPropertyChanging();
					this._GenderName = value;
					this.SendPropertyChanged("GenderName");
					this.OnGenderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gender_User", Storage="_Users", ThisKey="GenderId", OtherKey="GenderId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Gender = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Gender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TotalScore")]
	public partial class TotalScore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScoreId;
		
		private System.Nullable<int> _UserId;
		
		private string _Score;
		
		private System.Nullable<int> _ExamId;
		
		private string _ScorOpen;
		
		private string _TotalScore1;
		
		private string _Performance;
		
		private EntityRef<User> _User;
		
		private EntityRef<Exam> _Exam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScoreIdChanging(int value);
    partial void OnScoreIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnScoreChanging(string value);
    partial void OnScoreChanged();
    partial void OnExamIdChanging(System.Nullable<int> value);
    partial void OnExamIdChanged();
    partial void OnScorOpenChanging(string value);
    partial void OnScorOpenChanged();
    partial void OnTotalScore1Changing(string value);
    partial void OnTotalScore1Changed();
    partial void OnPerformanceChanging(string value);
    partial void OnPerformanceChanged();
    #endregion
		
		public TotalScore()
		{
			this._User = default(EntityRef<User>);
			this._Exam = default(EntityRef<Exam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScoreId
		{
			get
			{
				return this._ScoreId;
			}
			set
			{
				if ((this._ScoreId != value))
				{
					this.OnScoreIdChanging(value);
					this.SendPropertyChanging();
					this._ScoreId = value;
					this.SendPropertyChanged("ScoreId");
					this.OnScoreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="VarChar(10)")]
		public string Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamId", DbType="Int")]
		public System.Nullable<int> ExamId
		{
			get
			{
				return this._ExamId;
			}
			set
			{
				if ((this._ExamId != value))
				{
					if (this._Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamIdChanging(value);
					this.SendPropertyChanging();
					this._ExamId = value;
					this.SendPropertyChanged("ExamId");
					this.OnExamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScorOpen", DbType="VarChar(10)")]
		public string ScorOpen
		{
			get
			{
				return this._ScorOpen;
			}
			set
			{
				if ((this._ScorOpen != value))
				{
					this.OnScorOpenChanging(value);
					this.SendPropertyChanging();
					this._ScorOpen = value;
					this.SendPropertyChanged("ScorOpen");
					this.OnScorOpenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TotalScore", Storage="_TotalScore1", DbType="VarChar(10)")]
		public string TotalScore1
		{
			get
			{
				return this._TotalScore1;
			}
			set
			{
				if ((this._TotalScore1 != value))
				{
					this.OnTotalScore1Changing(value);
					this.SendPropertyChanging();
					this._TotalScore1 = value;
					this.SendPropertyChanged("TotalScore1");
					this.OnTotalScore1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Performance", DbType="VarChar(1)")]
		public string Performance
		{
			get
			{
				return this._Performance;
			}
			set
			{
				if ((this._Performance != value))
				{
					this.OnPerformanceChanging(value);
					this.SendPropertyChanging();
					this._Performance = value;
					this.SendPropertyChanged("Performance");
					this.OnPerformanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TotalScore", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TotalScores.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TotalScores.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_TotalScore", Storage="_Exam", ThisKey="ExamId", OtherKey="ExamId", IsForeignKey=true)]
		public Exam Exam
		{
			get
			{
				return this._Exam.Entity;
			}
			set
			{
				Exam previousValue = this._Exam.Entity;
				if (((previousValue != value) 
							|| (this._Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam.Entity = null;
						previousValue.TotalScores.Remove(this);
					}
					this._Exam.Entity = value;
					if ((value != null))
					{
						value.TotalScores.Add(this);
						this._ExamId = value.ExamId;
					}
					else
					{
						this._ExamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Exam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exam")]
	public partial class Exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExamId;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _CQId;
		
		private System.Nullable<System.DateTime> _ExamDate;
		
		private string _UserIPd;
		
		private EntitySet<ExamQuestion> _ExamQuestions;
		
		private EntitySet<TotalScore> _TotalScores;
		
		private EntitySet<OpenQuestionsAnswer> _OpenQuestionsAnswers;
		
		private EntityRef<CategoryQuestion> _CategoryQuestion;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamIdChanging(int value);
    partial void OnExamIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnCQIdChanging(System.Nullable<int> value);
    partial void OnCQIdChanged();
    partial void OnExamDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExamDateChanged();
    partial void OnUserIPdChanging(string value);
    partial void OnUserIPdChanged();
    #endregion
		
		public Exam()
		{
			this._ExamQuestions = new EntitySet<ExamQuestion>(new Action<ExamQuestion>(this.attach_ExamQuestions), new Action<ExamQuestion>(this.detach_ExamQuestions));
			this._TotalScores = new EntitySet<TotalScore>(new Action<TotalScore>(this.attach_TotalScores), new Action<TotalScore>(this.detach_TotalScores));
			this._OpenQuestionsAnswers = new EntitySet<OpenQuestionsAnswer>(new Action<OpenQuestionsAnswer>(this.attach_OpenQuestionsAnswers), new Action<OpenQuestionsAnswer>(this.detach_OpenQuestionsAnswers));
			this._CategoryQuestion = default(EntityRef<CategoryQuestion>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExamId
		{
			get
			{
				return this._ExamId;
			}
			set
			{
				if ((this._ExamId != value))
				{
					this.OnExamIdChanging(value);
					this.SendPropertyChanging();
					this._ExamId = value;
					this.SendPropertyChanged("ExamId");
					this.OnExamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CQId", DbType="Int")]
		public System.Nullable<int> CQId
		{
			get
			{
				return this._CQId;
			}
			set
			{
				if ((this._CQId != value))
				{
					if (this._CategoryQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCQIdChanging(value);
					this.SendPropertyChanging();
					this._CQId = value;
					this.SendPropertyChanged("CQId");
					this.OnCQIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExamDate
		{
			get
			{
				return this._ExamDate;
			}
			set
			{
				if ((this._ExamDate != value))
				{
					this.OnExamDateChanging(value);
					this.SendPropertyChanging();
					this._ExamDate = value;
					this.SendPropertyChanged("ExamDate");
					this.OnExamDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIPd", DbType="VarChar(15)")]
		public string UserIPd
		{
			get
			{
				return this._UserIPd;
			}
			set
			{
				if ((this._UserIPd != value))
				{
					this.OnUserIPdChanging(value);
					this.SendPropertyChanging();
					this._UserIPd = value;
					this.SendPropertyChanged("UserIPd");
					this.OnUserIPdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_ExamQuestion", Storage="_ExamQuestions", ThisKey="ExamId", OtherKey="ExamId")]
		public EntitySet<ExamQuestion> ExamQuestions
		{
			get
			{
				return this._ExamQuestions;
			}
			set
			{
				this._ExamQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_TotalScore", Storage="_TotalScores", ThisKey="ExamId", OtherKey="ExamId")]
		public EntitySet<TotalScore> TotalScores
		{
			get
			{
				return this._TotalScores;
			}
			set
			{
				this._TotalScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_OpenQuestionsAnswer", Storage="_OpenQuestionsAnswers", ThisKey="ExamId", OtherKey="ExamId")]
		public EntitySet<OpenQuestionsAnswer> OpenQuestionsAnswers
		{
			get
			{
				return this._OpenQuestionsAnswers;
			}
			set
			{
				this._OpenQuestionsAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryQuestion_Exam", Storage="_CategoryQuestion", ThisKey="CQId", OtherKey="CQId", IsForeignKey=true)]
		public CategoryQuestion CategoryQuestion
		{
			get
			{
				return this._CategoryQuestion.Entity;
			}
			set
			{
				CategoryQuestion previousValue = this._CategoryQuestion.Entity;
				if (((previousValue != value) 
							|| (this._CategoryQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryQuestion.Entity = null;
						previousValue.Exams.Remove(this);
					}
					this._CategoryQuestion.Entity = value;
					if ((value != null))
					{
						value.Exams.Add(this);
						this._CQId = value.CQId;
					}
					else
					{
						this._CQId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CategoryQuestion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Exam", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Exams.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Exams.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamQuestions(ExamQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Exam = this;
		}
		
		private void detach_ExamQuestions(ExamQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Exam = null;
		}
		
		private void attach_TotalScores(TotalScore entity)
		{
			this.SendPropertyChanging();
			entity.Exam = this;
		}
		
		private void detach_TotalScores(TotalScore entity)
		{
			this.SendPropertyChanging();
			entity.Exam = null;
		}
		
		private void attach_OpenQuestionsAnswers(OpenQuestionsAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Exam = this;
		}
		
		private void detach_OpenQuestionsAnswers(OpenQuestionsAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Exam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.student_answer")]
	public partial class student_answer
	{
		
		private int _QOId;
		
		private string _QOText;
		
		private string _QOStatus;
		
		private System.Nullable<int> _CQId;
		
		private System.Nullable<int> _AdminConturol;
		
		private int _OpenAnswerId;
		
		private System.Nullable<int> _StudentId;
		
		private System.Nullable<int> _ExamId;
		
		private System.Nullable<int> _OPId;
		
		private string _SutudentAnswer;
		
		private string _AnswerStatus;
		
		private System.Nullable<int> _TeacherId;
		
		private System.Nullable<int> _TeacherPoint;
		
		private System.Nullable<int> _GiveT;
		
		public student_answer()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QOId", DbType="Int NOT NULL")]
		public int QOId
		{
			get
			{
				return this._QOId;
			}
			set
			{
				if ((this._QOId != value))
				{
					this._QOId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QOText", DbType="NVarChar(MAX)")]
		public string QOText
		{
			get
			{
				return this._QOText;
			}
			set
			{
				if ((this._QOText != value))
				{
					this._QOText = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QOStatus", DbType="VarChar(7)")]
		public string QOStatus
		{
			get
			{
				return this._QOStatus;
			}
			set
			{
				if ((this._QOStatus != value))
				{
					this._QOStatus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CQId", DbType="Int")]
		public System.Nullable<int> CQId
		{
			get
			{
				return this._CQId;
			}
			set
			{
				if ((this._CQId != value))
				{
					this._CQId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminConturol", DbType="Int")]
		public System.Nullable<int> AdminConturol
		{
			get
			{
				return this._AdminConturol;
			}
			set
			{
				if ((this._AdminConturol != value))
				{
					this._AdminConturol = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenAnswerId", DbType="Int NOT NULL")]
		public int OpenAnswerId
		{
			get
			{
				return this._OpenAnswerId;
			}
			set
			{
				if ((this._OpenAnswerId != value))
				{
					this._OpenAnswerId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int")]
		public System.Nullable<int> StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this._StudentId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamId", DbType="Int")]
		public System.Nullable<int> ExamId
		{
			get
			{
				return this._ExamId;
			}
			set
			{
				if ((this._ExamId != value))
				{
					this._ExamId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OPId", DbType="Int")]
		public System.Nullable<int> OPId
		{
			get
			{
				return this._OPId;
			}
			set
			{
				if ((this._OPId != value))
				{
					this._OPId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SutudentAnswer", DbType="NVarChar(MAX)")]
		public string SutudentAnswer
		{
			get
			{
				return this._SutudentAnswer;
			}
			set
			{
				if ((this._SutudentAnswer != value))
				{
					this._SutudentAnswer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerStatus", DbType="VarChar(6)")]
		public string AnswerStatus
		{
			get
			{
				return this._AnswerStatus;
			}
			set
			{
				if ((this._AnswerStatus != value))
				{
					this._AnswerStatus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int")]
		public System.Nullable<int> TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					this._TeacherId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherPoint", DbType="Int")]
		public System.Nullable<int> TeacherPoint
		{
			get
			{
				return this._TeacherPoint;
			}
			set
			{
				if ((this._TeacherPoint != value))
				{
					this._TeacherPoint = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiveT", DbType="Int")]
		public System.Nullable<int> GiveT
		{
			get
			{
				return this._GiveT;
			}
			set
			{
				if ((this._GiveT != value))
				{
					this._GiveT = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OpenQuestionsAnswer")]
	public partial class OpenQuestionsAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OpenAnswerId;
		
		private System.Nullable<int> _StudentId;
		
		private System.Nullable<int> _ExamId;
		
		private System.Nullable<int> _OPId;
		
		private string _SutudentAnswer;
		
		private string _AnswerStatus;
		
		private System.Nullable<int> _TeacherId;
		
		private System.Nullable<int> _TeacherPoint;
		
		private System.Nullable<int> _GiveT;
		
		private EntityRef<Exam> _Exam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOpenAnswerIdChanging(int value);
    partial void OnOpenAnswerIdChanged();
    partial void OnStudentIdChanging(System.Nullable<int> value);
    partial void OnStudentIdChanged();
    partial void OnExamIdChanging(System.Nullable<int> value);
    partial void OnExamIdChanged();
    partial void OnOPIdChanging(System.Nullable<int> value);
    partial void OnOPIdChanged();
    partial void OnSutudentAnswerChanging(string value);
    partial void OnSutudentAnswerChanged();
    partial void OnAnswerStatusChanging(string value);
    partial void OnAnswerStatusChanged();
    partial void OnTeacherIdChanging(System.Nullable<int> value);
    partial void OnTeacherIdChanged();
    partial void OnTeacherPointChanging(System.Nullable<int> value);
    partial void OnTeacherPointChanged();
    partial void OnGiveTChanging(System.Nullable<int> value);
    partial void OnGiveTChanged();
    #endregion
		
		public OpenQuestionsAnswer()
		{
			this._Exam = default(EntityRef<Exam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenAnswerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OpenAnswerId
		{
			get
			{
				return this._OpenAnswerId;
			}
			set
			{
				if ((this._OpenAnswerId != value))
				{
					this.OnOpenAnswerIdChanging(value);
					this.SendPropertyChanging();
					this._OpenAnswerId = value;
					this.SendPropertyChanged("OpenAnswerId");
					this.OnOpenAnswerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int")]
		public System.Nullable<int> StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamId", DbType="Int")]
		public System.Nullable<int> ExamId
		{
			get
			{
				return this._ExamId;
			}
			set
			{
				if ((this._ExamId != value))
				{
					if (this._Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamIdChanging(value);
					this.SendPropertyChanging();
					this._ExamId = value;
					this.SendPropertyChanged("ExamId");
					this.OnExamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OPId", DbType="Int")]
		public System.Nullable<int> OPId
		{
			get
			{
				return this._OPId;
			}
			set
			{
				if ((this._OPId != value))
				{
					this.OnOPIdChanging(value);
					this.SendPropertyChanging();
					this._OPId = value;
					this.SendPropertyChanged("OPId");
					this.OnOPIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SutudentAnswer", DbType="NVarChar(MAX)")]
		public string SutudentAnswer
		{
			get
			{
				return this._SutudentAnswer;
			}
			set
			{
				if ((this._SutudentAnswer != value))
				{
					this.OnSutudentAnswerChanging(value);
					this.SendPropertyChanging();
					this._SutudentAnswer = value;
					this.SendPropertyChanged("SutudentAnswer");
					this.OnSutudentAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerStatus", DbType="VarChar(6)")]
		public string AnswerStatus
		{
			get
			{
				return this._AnswerStatus;
			}
			set
			{
				if ((this._AnswerStatus != value))
				{
					this.OnAnswerStatusChanging(value);
					this.SendPropertyChanging();
					this._AnswerStatus = value;
					this.SendPropertyChanged("AnswerStatus");
					this.OnAnswerStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int")]
		public System.Nullable<int> TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherPoint", DbType="Int")]
		public System.Nullable<int> TeacherPoint
		{
			get
			{
				return this._TeacherPoint;
			}
			set
			{
				if ((this._TeacherPoint != value))
				{
					this.OnTeacherPointChanging(value);
					this.SendPropertyChanging();
					this._TeacherPoint = value;
					this.SendPropertyChanged("TeacherPoint");
					this.OnTeacherPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiveT", DbType="Int")]
		public System.Nullable<int> GiveT
		{
			get
			{
				return this._GiveT;
			}
			set
			{
				if ((this._GiveT != value))
				{
					this.OnGiveTChanging(value);
					this.SendPropertyChanging();
					this._GiveT = value;
					this.SendPropertyChanged("GiveT");
					this.OnGiveTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_OpenQuestionsAnswer", Storage="_Exam", ThisKey="ExamId", OtherKey="ExamId", IsForeignKey=true)]
		public Exam Exam
		{
			get
			{
				return this._Exam.Entity;
			}
			set
			{
				Exam previousValue = this._Exam.Entity;
				if (((previousValue != value) 
							|| (this._Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam.Entity = null;
						previousValue.OpenQuestionsAnswers.Remove(this);
					}
					this._Exam.Entity = value;
					if ((value != null))
					{
						value.OpenQuestionsAnswers.Add(this);
						this._ExamId = value.ExamId;
					}
					else
					{
						this._ExamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Exam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.News")]
	public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsId;
		
		private string _NewsTitle;
		
		private string _NewsText;
		
		private string _NewsPhoto;
		
		private System.Nullable<System.DateTime> _NewsDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsIdChanging(int value);
    partial void OnNewsIdChanged();
    partial void OnNewsTitleChanging(string value);
    partial void OnNewsTitleChanged();
    partial void OnNewsTextChanging(string value);
    partial void OnNewsTextChanged();
    partial void OnNewsPhotoChanging(string value);
    partial void OnNewsPhotoChanged();
    partial void OnNewsDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNewsDateChanged();
    #endregion
		
		public New()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NewsId
		{
			get
			{
				return this._NewsId;
			}
			set
			{
				if ((this._NewsId != value))
				{
					this.OnNewsIdChanging(value);
					this.SendPropertyChanging();
					this._NewsId = value;
					this.SendPropertyChanged("NewsId");
					this.OnNewsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsTitle", DbType="NVarChar(MAX)")]
		public string NewsTitle
		{
			get
			{
				return this._NewsTitle;
			}
			set
			{
				if ((this._NewsTitle != value))
				{
					this.OnNewsTitleChanging(value);
					this.SendPropertyChanging();
					this._NewsTitle = value;
					this.SendPropertyChanged("NewsTitle");
					this.OnNewsTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsText", DbType="NVarChar(MAX)")]
		public string NewsText
		{
			get
			{
				return this._NewsText;
			}
			set
			{
				if ((this._NewsText != value))
				{
					this.OnNewsTextChanging(value);
					this.SendPropertyChanging();
					this._NewsText = value;
					this.SendPropertyChanged("NewsText");
					this.OnNewsTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsPhoto", DbType="VarChar(MAX)")]
		public string NewsPhoto
		{
			get
			{
				return this._NewsPhoto;
			}
			set
			{
				if ((this._NewsPhoto != value))
				{
					this.OnNewsPhotoChanging(value);
					this.SendPropertyChanging();
					this._NewsPhoto = value;
					this.SendPropertyChanged("NewsPhoto");
					this.OnNewsPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> NewsDate
		{
			get
			{
				return this._NewsDate;
			}
			set
			{
				if ((this._NewsDate != value))
				{
					this.OnNewsDateChanging(value);
					this.SendPropertyChanging();
					this._NewsDate = value;
					this.SendPropertyChanged("NewsDate");
					this.OnNewsDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
